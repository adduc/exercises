---
name: PR:Terraform

'on':
  pull_request:
    paths:
      # Terraform configuration
      - '**/*.tf'

permissions:
  contents: read  # used by actions/checkout

jobs:
  find:
    name: Find changed modules
    runs-on: ubuntu-24.04
    outputs:
      dirs: ${{ steps.changed_modules.outputs.changed_modules }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create squash commit (ACT Runner only)
        if: env.ACT == 'true'
        run: |
          # Github will automatically create a merge ref to use when invoking
          # workflows, but ACT takes the current commit (and its working tree)
          # as the base for the workflow. To emulate the merge ref, we can
          # create a squash commit to represent the changes.
          git reset --soft main
          git add .
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -m "Squash all commits"

      - name: Find terraform modules
        id: find
        run: |
          set -o pipefail -o errexit -o nounset

          DIRS=$( \
            find -name '*main.tf' -exec dirname {} \; \
            | jq -ncR '[inputs]' \
          )
          echo dirs=$DIRS >> $GITHUB_OUTPUT

      - name: Changed files
        id: files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c

      - name: Cross-check to determine changed modules
        id: changed_modules
        run: |
          FILES='${{ steps.files.outputs.all_changed_and_modified_files }}'
          DIRS='${{ steps.find.outputs.dirs }}'
          CHANGED=()

          for dir in $(echo $DIRS | jq -r '.[]'); do
            for file in $(echo $FILES); do
              # check if dir is a prefix of file
              if [[ "./$file" == "$dir"* ]]; then
                CHANGED+=("$dir")
                break
              fi
            done
          done

          # if empty, set to empty array
          if [ ${#CHANGED[@]} -eq 0 ]; then
            echo "changed_modules=[]" >> $GITHUB_OUTPUT
          else
            CHANGED=$(printf "%s\n" "${CHANGED[@]}" | jq -ncR '[inputs]')
            echo "changed_modules=$CHANGED" >> $GITHUB_OUTPUT
          fi

          echo 'changed_modules=[".github/infra"]' >> $GITHUB_OUTPUT

  style:
    uses: ./.github/workflows/call-terraform-style.yml
    needs: find
    if: ${{ needs.find.outputs.dirs != '[]' }}
    with:
      module_dirs: ${{ needs.find.outputs.dirs }}
