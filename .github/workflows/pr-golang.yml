---
name: PR:Golang

'on':
  pull_request:
    paths:
      # This workflow
      - '.github/workflows/pr-golang.yml'
      # Go files
      - '**/*.go'
      # Go dependencies
      - '**/go.*'

permissions:
  contents: read  # used by actions/checkout

jobs:
  find:
    name: Find go.mod files
    runs-on: ubuntu-24.04
    outputs:
      dirs: ${{ steps.find-mod.outputs.dirs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find go.mod files
        id: find-mod
        run: |
          DIRS=$(find . -name go.mod -exec dirname {} \; | jq -cR '[inputs]')
          echo "dirs=$DIRS" >> $GITHUB_OUTPUT

  lint:
    name: Lint
    runs-on: ubuntu-24.04
    needs: find
    strategy:
      fail-fast: false
      matrix:
        dir: ${{ fromJson(needs.find.outputs.dirs) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ matrix.dir }}/go.mod
          cache-dependency-path: ${{ matrix.dir }}/go.sum

      - name: Lint
        # yamllint disable rule:line-length
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9  # v8.0.0
        # yamllint enable
        with:
          version: v2.0
          working-directory: ${{ matrix.dir }}

  format:
    name: Format
    runs-on: ubuntu-24.04
    needs: find
    strategy:
      fail-fast: false
      matrix:
        dir: ${{ fromJson(needs.find.outputs.dirs) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ matrix.dir }}/go.mod
          cache-dependency-path: ${{ matrix.dir }}/go.sum

      - name: Format
        run: |
          FILES=$(gofmt -l -w ${{ matrix.dir }})
          if [ -n "$FILES" ]; then
            echo "The following files are not formatted correctly:"
            echo "$FILES"
            echo "Please run 'gofmt -w ${{ matrix.dir }}' to format them."
            echo ""
            echo "::group::Diff of unformatted files"
            git diff
            echo "::endgroup::"
            exit 1
          fi

    # @todo format all Go files, fail the PR if any require formatting
